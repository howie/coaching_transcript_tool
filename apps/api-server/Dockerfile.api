# Build stage
FROM python:3.11-slim AS builder

# Set environment variables for the build stage
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy the source code and configuration files
COPY src/ ./src/
COPY pyproject.toml requirements.txt ./

# Copy API server requirements and install them
COPY apps/api-server/requirements.txt ./apps/api-server/
RUN pip install --prefix=/install -r ./apps/api-server/requirements.txt

# Install the core logic package
RUN pip install --prefix=/install ./

# Runtime stage
FROM python:3.11-slim

# Set environment variables
ENV PYTHONPATH=/app/src:/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=8000 \
    IS_CONTAINER=true

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Copy installed packages from builder
COPY --from=builder /install /usr/local

# Copy source code and alembic files
COPY src/ ./src/
COPY alembic/ ./alembic/
COPY alembic.ini pyproject.toml version.json ./

# Copy the API server code and startup script
COPY apps/api-server/main.py ./
COPY apps/api-server/start.sh ./

# Make startup script executable and create a non-root user
RUN chmod +x start.sh && \
    groupadd -r appuser && useradd -r -g appuser appuser && \
    chown -R appuser:appuser /app
USER appuser

# Create necessary directories
RUN mkdir -p /app/data/uploads

# Expose the port the app runs on
EXPOSE $PORT

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:$PORT/health || exit 1

# Command to run the application with migration check
CMD ["./start.sh"]
