'use client';

import React, { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { PencilIcon, TrashIcon, ArrowLeftIcon, DocumentArrowDownIcon, MicrophoneIcon, DocumentTextIcon, ChartBarIcon, ChatBubbleLeftRightIcon, DocumentMagnifyingGlassIcon } from '@heroicons/react/24/outline';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select } from '@/components/ui/select';
import { useAuth } from '@/contexts/auth-context';
import { useI18n } from '@/contexts/i18n-context';
import { apiClient } from '@/lib/api';
import { TranscriptionProgress } from '@/components/ui/progress-bar';
import { useTranscriptionStatus, formatTimeRemaining, formatDuration } from '@/hooks/useTranscriptionStatus';

interface Session {
  id: string;
  session_date: string;
  client_id: string;
  client_name?: string;
  client?: Client;
  duration_min: number;
  fee_currency: string;
  fee_amount: number;
  fee_display: string;
  duration_display: string;
  transcript_timeseq_id?: string;
  audio_timeseq_id?: string;
  notes?: string;
  created_at: string;
  updated_at: string;
}

interface TranscriptSegment {
  id: string;
  speaker_id: number;
  start_sec: number;
  end_sec: number;
  content: string;
  confidence?: number;
}

interface TranscriptData {
  session_id: string;
  title: string;
  language: string;
  duration_sec: number;
  segments: TranscriptSegment[];
  created_at: string;
}

interface SpeakingStats {
  coach_speaking_time: number;
  client_speaking_time: number;
  total_speaking_time: number;
  coach_percentage: number;
  client_percentage: number;
  silence_time: number;
}

interface Client {
  id: string;
  name: string;
}

const SessionDetailPage = () => {
  const { user } = useAuth();
  const { t } = useI18n();
  const router = useRouter();
  const params = useParams();
  const sessionId = params.id as string;

  const [loading, setLoading] = useState(false);
  const [fetching, setFetching] = useState(true);
  const [editMode, setEditMode] = useState(false);
  const [session, setSession] = useState<Session | null>(null);
  const [clients, setClients] = useState<Client[]>([]);
  const [currencies, setCurrencies] = useState<any[]>([]);
  const [formData, setFormData] = useState({
    session_date: '',
    client_id: '',
    duration_min: 60,
    fee_currency: 'TWD',
    fee_amount: 0,
    notes: ''
  });
  const [activeTab, setActiveTab] = useState<'overview' | 'transcript' | 'analysis'>('overview');
  const [transcript, setTranscript] = useState<TranscriptData | null>(null);
  const [transcriptLoading, setTranscriptLoading] = useState(false);
  const [exportFormat, setExportFormat] = useState<'vtt' | 'srt' | 'txt' | 'json'>('vtt');
  const [speakingStats, setSpeakingStats] = useState<SpeakingStats | null>(null);
  const [aiAnalysis, setAiAnalysis] = useState<string>('');
  const [chatMessages, setChatMessages] = useState<Array<{role: 'user' | 'assistant', content: string}>>([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isGeneratingAnalysis, setIsGeneratingAnalysis] = useState(false);

  // Use transcription status hook for progress tracking
  const {
    status: transcriptionStatus,
    session: transcriptionSession,
    loading: statusLoading,
    error: statusError,
    startPolling,
    stopPolling,
    isPolling
  } = useTranscriptionStatus(session?.audio_timeseq_id || null, {
    enablePolling: session?.audio_timeseq_id !== null
  });

  useEffect(() => {
    if (sessionId) {
      fetchSession();
      fetchClients();
      fetchCurrencies();
    }
  }, [sessionId]);

  useEffect(() => {
    // Check if transcription is completed and fetch transcript
    if (transcriptionSession?.status === 'completed' && session?.audio_timeseq_id) {
      fetchTranscript(session.audio_timeseq_id);
    }
  }, [transcriptionSession?.status]);

  useEffect(() => {
    // Calculate speaking stats when transcript is available
    if (transcript && transcript.segments && transcript.segments.length > 0) {
      const stats = calculateSpeakingStats(transcript.segments);
      setSpeakingStats(stats);
    }
  }, [transcript]);

  const fetchSession = async () => {
    try {
      const data = await apiClient.getSession(sessionId);
      setSession(data);
      setFormData({
        session_date: data.session_date,
        client_id: data.client_id,
        duration_min: data.duration_min,
        fee_currency: data.fee_currency,
        fee_amount: data.fee_amount,
        notes: data.notes || ''
      });
    } catch (error) {
      console.error('Failed to fetch session:', error);
      setSession(null);
    } finally {
      setFetching(false);
    }
  };

  const fetchClients = async () => {
    try {
      const response = await apiClient.getClients(1, 100);
      setClients(response.items);
    } catch (error) {
      console.error('Failed to fetch clients:', error);
    }
  };

  const fetchTranscript = async (audioSessionId: string) => {
    try {
      setTranscriptLoading(true);
      const response = await apiClient.exportTranscript(audioSessionId, 'json');
      // The export API returns a string (JSON content)
      if (typeof response === 'string') {
        try {
          const parsed = JSON.parse(response) as TranscriptData;
          setTranscript(parsed);
        } catch (e) {
          console.error('Failed to parse transcript JSON:', e);
        }
      } else {
        console.warn('Unexpected response type from exportTranscript:', typeof response);
      }
    } catch (error) {
      console.error('Failed to fetch transcript:', error);
      // Transcript might not be ready yet
    } finally {
      setTranscriptLoading(false);
    }
  };

  const handleExportTranscript = async () => {
    if (!session?.audio_timeseq_id) return;
    
    try {
      const response = await apiClient.exportTranscript(session.audio_timeseq_id, exportFormat);
      const blob = new Blob([response], { 
        type: exportFormat === 'json' ? 'application/json' : 'text/plain' 
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `transcript-${session.id}.${exportFormat}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Failed to export transcript:', error);
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const getSpeakerLabel = (speakerId: number) => {
    // In future, this can be mapped to actual roles (Coach/Client)
    return speakerId === 1 ? '教練' : '客戶';
  };

  const getSpeakerColor = (speakerId: number) => {
    return speakerId === 1 ? 'text-blue-600' : 'text-green-600';
  };

  const calculateSpeakingStats = (segments: TranscriptSegment[]): SpeakingStats => {
    let coachTime = 0;
    let clientTime = 0;
    
    segments.forEach(segment => {
      const duration = segment.end_sec - segment.start_sec;
      if (segment.speaker_id === 1) {
        coachTime += duration;
      } else {
        clientTime += duration;
      }
    });
    
    const totalSpeaking = coachTime + clientTime;
    const totalDuration = transcript?.duration_sec || 0;
    const silenceTime = totalDuration - totalSpeaking;
    
    return {
      coach_speaking_time: coachTime,
      client_speaking_time: clientTime,
      total_speaking_time: totalSpeaking,
      coach_percentage: totalSpeaking > 0 ? (coachTime / totalSpeaking) * 100 : 0,
      client_percentage: totalSpeaking > 0 ? (clientTime / totalSpeaking) * 100 : 0,
      silence_time: Math.max(0, silenceTime)
    };
  };

  const generateAISummary = async () => {
    if (!transcript || !transcript.segments.length) return;
    
    setIsGeneratingAnalysis(true);
    try {
      // Mock AI analysis - in real implementation, this would call an AI service
      const mockSummary = `## 會談摘要\n\n本次諮詢會談時長約 ${formatDuration(transcript.duration_sec)}，教練與客戶的對話比例為 ${speakingStats?.coach_percentage.toFixed(1)}% : ${speakingStats?.client_percentage.toFixed(1)}%。\n\n### 主要討論議題\n- 客戶分享了近期工作上的挑戰\n- 探討了職涯發展的方向\n- 討論了工作與生活平衡的策略\n\n### 教練觀察\n- 客戶在表達時較為謹慎，可能需要更多鼓勵\n- 對於目標設定有清晰的想法\n- 展現出積極的學習態度\n\n### 後續建議\n1. 客戶可嘗試設定SMART目標\n2. 建議進行時間管理技巧的練習\n3. 下次會談可深入討論具體行動計畫`;
      
      setAiAnalysis(mockSummary);
      
      // Also add to chat history
      setChatMessages(prev => [...prev, {
        role: 'assistant',
        content: mockSummary
      }]);
      
    } catch (error) {
      console.error('Failed to generate AI summary:', error);
    } finally {
      setIsGeneratingAnalysis(false);
    }
  };

  const sendChatMessage = async () => {
    if (!currentMessage.trim()) return;
    
    const userMessage = currentMessage;
    setCurrentMessage('');
    setChatMessages(prev => [...prev, { role: 'user', content: userMessage }]);
    
    // Mock AI response - in real implementation, this would call an AI service
    setTimeout(() => {
      const mockResponse = `這是一個很好的問題。根據會談內容，我建議您可以從以下角度來思考：\n\n1. 客戶在這方面表現出的模式\n2. 可能的改善策略\n3. 下次會談的重點方向\n\n您還有其他想了解的嗎？`;
      setChatMessages(prev => [...prev, { role: 'assistant', content: mockResponse }]);
    }, 1000);
  };

  const fetchCurrencies = async () => {
    try {
      const data = await apiClient.getCurrencies();
      // Validate that data is an array with the expected structure
      if (Array.isArray(data) && data.length > 0 && 
          data.every(item => item && typeof item === 'object' && 'value' in item && 'label' in item)) {
        setCurrencies(data);
      } else {
        console.warn('Invalid currency data format, using defaults');
        setCurrencies([
          { value: 'TWD', label: 'TWD - 新台幣' },
          { value: 'USD', label: 'USD - 美元' },
          { value: 'CNY', label: 'CNY - 人民幣' }
        ]);
      }
    } catch (error) {
      console.error('Failed to fetch currencies:', error);
      setCurrencies([
        { value: 'TWD', label: 'TWD - 新台幣' },
        { value: 'USD', label: 'USD - 美元' },
        { value: 'CNY', label: 'CNY - 人民幣' }
      ]);
    }
  };

  const handleUpdate = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      await apiClient.updateSession(sessionId, {
        ...formData,
        fee_amount: Number(formData.fee_amount),
        duration_min: Number(formData.duration_min)
      });
      setEditMode(false);
      fetchSession();
    } catch (error) {
      console.error('Failed to update session:', error);
      alert(t('sessions.updateError') || 'Failed to update session');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    if (!confirm(t('sessions.confirmDelete'))) return;

    try {
      await apiClient.deleteSession(sessionId);
      router.push('/dashboard/sessions');
    } catch (error) {
      console.error('Failed to delete session:', error);
      alert(t('sessions.deleteError') || 'Failed to delete session');
    }
  };

  if (fetching) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg">{t('sessions.loading')}</div>
      </div>
    );
  }

  if (!session) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg">Session not found</div>
      </div>
    );
  }

  const currentClient = clients.find(c => c.id === session.client_id);
  const isTranscribing = transcriptionSession?.status === 'processing';
  const hasTranscript = transcript && transcript.segments && transcript.segments.length > 0;

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-content-primary">
            {t('sessions.sessionDetail')}
          </h1>
          <div className="flex gap-3">
            <Button
              variant="outline"
              onClick={() => router.push('/dashboard/sessions')}
              className="flex items-center gap-2"
            >
              <ArrowLeftIcon className="h-4 w-4" />
              {t('common.back')}
            </Button>
            {!editMode ? (
              <Button
                onClick={() => setEditMode(true)}
                className="flex items-center gap-2"
              >
                <PencilIcon className="h-4 w-4" />
                {t('common.edit')}
              </Button>
            ) : null}
            <Button
              variant="outline"
              onClick={handleDelete}
              className="flex items-center gap-2 text-red-600 hover:text-red-700"
            >
              <TrashIcon className="h-4 w-4" />
              {t('common.delete')}
            </Button>
          </div>
        </div>

        {/* Tabs */}
        <div className="flex gap-4 mb-6 border-b border-border">
          <button
            onClick={() => setActiveTab('overview')}
            className={`pb-2 px-4 transition-colors flex items-center gap-2 ${
              activeTab === 'overview' 
                ? 'text-blue-500 border-b-2 border-blue-500' 
                : 'text-content-secondary hover:text-content-primary'
            }`}
          >
            <ChartBarIcon className="h-4 w-4" />
            會談概覽
          </button>
          <button
            onClick={() => setActiveTab('transcript')}
            className={`pb-2 px-4 transition-colors flex items-center gap-2 ${
              activeTab === 'transcript' 
                ? 'text-blue-500 border-b-2 border-blue-500' 
                : 'text-content-secondary hover:text-content-primary'
            }`}
          >
            <DocumentTextIcon className="h-4 w-4" />
            逐字稿
            {isTranscribing && (
              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800">
                處理中
              </span>
            )}
            {hasTranscript && (
              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                已完成
              </span>
            )}
          </button>
          <button
            onClick={() => setActiveTab('analysis')}
            className={`pb-2 px-4 transition-colors flex items-center gap-2 ${
              activeTab === 'analysis' 
                ? 'text-blue-500 border-b-2 border-blue-500' 
                : 'text-content-secondary hover:text-content-primary'
            }`}
          >
            <ChatBubbleLeftRightIcon className="h-4 w-4" />
            AI 分析
            {hasTranscript && (
              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800">
                可用
              </span>
            )}
          </button>
        </div>

        {/* Content */}
        {activeTab === 'overview' && (
          <div className="bg-surface border border-border rounded-lg p-6">
          {editMode ? (
            <form onSubmit={handleUpdate} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-content-primary mb-2">
                  {t('sessions.sessionDate')} *
                </label>
                <Input
                  type="date"
                  required
                  value={formData.session_date}
                  onChange={(e) => setFormData({ ...formData, session_date: e.target.value })}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-content-primary mb-2">
                  {t('sessions.client')} *
                </label>
                <Select
                  required
                  value={formData.client_id}
                  onChange={(e) => setFormData({ ...formData, client_id: e.target.value })}
                >
                  {clients.map((client) => (
                    <option key={client.id} value={client.id}>
                      {client.name}
                    </option>
                  ))}
                </Select>
              </div>

              <div>
                <label className="block text-sm font-medium text-content-primary mb-2">
                  {t('sessions.durationMinutes')}
                </label>
                <Input
                  type="number"
                  min="1"
                  required
                  value={formData.duration_min}
                  onChange={(e) => setFormData({ ...formData, duration_min: parseInt(e.target.value) || 0 })}
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-content-primary mb-2">
                    {t('sessions.currency')}
                  </label>
                  <Select
                    value={formData.fee_currency}
                    onChange={(e) => setFormData({ ...formData, fee_currency: e.target.value })}
                  >
                    {currencies.map((currency) => (
                      <option key={currency.value} value={currency.value}>
                        {String(currency.label || currency.value)}
                      </option>
                    ))}
                  </Select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-content-primary mb-2">
                    {t('sessions.amount')} *
                  </label>
                  <Input
                    type="number"
                    min="0"
                    required
                    value={formData.fee_amount}
                    onChange={(e) => setFormData({ ...formData, fee_amount: parseInt(e.target.value) || 0 })}
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-content-primary mb-2">
                  {t('sessions.notes')}
                </label>
                <textarea
                  className="w-full px-3 py-2 border border-border rounded-md bg-surface text-content-primary focus:outline-none focus:ring-2 focus:ring-accent"
                  rows={4}
                  value={formData.notes}
                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                />
              </div>

              <div className="flex justify-end gap-4 pt-6 border-t border-border">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setEditMode(false);
                    // Reset form data
                    setFormData({
                      session_date: session.session_date,
                      client_id: session.client_id,
                      duration_min: session.duration_min,
                      fee_currency: session.fee_currency,
                      fee_amount: session.fee_amount,
                      notes: session.notes || ''
                    });
                  }}
                  disabled={loading}
                >
                  {t('common.cancel')}
                </Button>
                <Button type="submit" disabled={loading}>
                  {loading ? t('common.updating') : t('common.save')}
                </Button>
              </div>
            </form>
          ) : (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-content-secondary mb-1">
                    {t('sessions.sessionDate')}
                  </label>
                  <p className="text-content-primary text-lg">{session.session_date}</p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-content-secondary mb-1">
                    {t('sessions.client')}
                  </label>
                  <p className="text-content-primary text-lg">
                    {currentClient?.name || session.client_name || '-'}
                  </p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-content-secondary mb-1">
                    {t('sessions.duration')}
                  </label>
                  <p className="text-content-primary">{session.duration_display}</p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-content-secondary mb-1">
                    {t('sessions.fee')}
                  </label>
                  <p className="text-content-primary text-lg font-medium">{session.fee_display}</p>
                </div>
              </div>

              {session.notes && (
                <div>
                  <label className="block text-sm font-medium text-content-secondary mb-1">
                    {t('sessions.notes')}
                  </label>
                  <p className="text-content-primary whitespace-pre-wrap">{session.notes}</p>
                </div>
              )}

              {/* Audio Upload Section */}
              <div className="pt-4 border-t border-border">
                <label className="block text-sm font-medium text-content-secondary mb-3">
                  音檔處理
                </label>
                <div className="flex flex-col sm:flex-row gap-3">
                  {!session.audio_timeseq_id ? (
                    <Button
                      onClick={() => router.push(`/dashboard/audio-analysis?session_id=${session.id}`)}
                      className="flex items-center gap-2"
                    >
                      <MicrophoneIcon className="h-4 w-4" />
                      上傳音檔
                    </Button>
                  ) : (
                    <div className="flex flex-col sm:flex-row gap-3">
                      <div className="flex items-center gap-2 text-green-600">
                        <DocumentTextIcon className="h-4 w-4" />
                        <span className="text-sm">已上傳音檔</span>
                      </div>
                      {hasTranscript && (
                        <div className="flex items-center gap-2 text-blue-600">
                          <DocumentArrowDownIcon className="h-4 w-4" />
                          <span className="text-sm">逐字稿已完成</span>
                        </div>
                      )}
                      {isTranscribing && (
                        <div className="flex items-center gap-2 text-yellow-600">
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600"></div>
                          <span className="text-sm">轉檔處理中...</span>
                        </div>
                      )}
                    </div>
                  )}
                </div>
                
                {session.audio_timeseq_id && (
                  <div className="mt-3 text-sm text-content-secondary">
                    提示：可在「逐字稿」標籤中查看轉檔進度和結果
                  </div>
                )}
              </div>

              <div className="pt-4 border-t border-border">
                <div className="text-sm text-content-secondary">
                  <p>{t('common.createdAt')}: {new Date(session.created_at).toLocaleString()}</p>
                  <p>{t('common.updatedAt')}: {new Date(session.updated_at).toLocaleString()}</p>
                </div>
              </div>
        )}

        {activeTab === 'transcript' && (
          <div className="space-y-4">
            {/* Transcription Status */}
            {isTranscribing && transcriptionStatus && (
              <div className="bg-surface border border-border rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-4 text-content-primary">
                  轉檔處理中
                </h3>
                <TranscriptionProgress
                  progress={transcriptionStatus.progress}
                  status={transcriptionSession?.status === 'processing' ? 'processing' : 'pending'}
                  message={transcriptionStatus.message || '處理中...'}
                  estimatedTime={transcriptionStatus.estimated_completion ? 
                    formatTimeRemaining(transcriptionStatus.estimated_completion) : undefined}
                />
                {transcriptionStatus.duration_processed && transcriptionStatus.duration_total && (
                  <div className="mt-2 text-sm text-content-secondary">
                    已處理: {formatDuration(transcriptionStatus.duration_processed)} / {formatDuration(transcriptionStatus.duration_total)}
                  </div>
                )}
              </div>
            )}

            {/* Export Controls */}
            {hasTranscript && (
              <div className="bg-surface border border-border rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <label className="text-sm font-medium text-content-primary">
                      匯出格式:
                    </label>
                    <select
                      value={exportFormat}
                      onChange={(e) => setExportFormat(e.target.value as any)}
                      className="px-3 py-1 border border-border rounded-md bg-surface text-content-primary"
                    >
                      <option value="vtt">WebVTT (.vtt)</option>
                      <option value="srt">SubRip (.srt)</option>
                      <option value="txt">純文字 (.txt)</option>
                      <option value="json">JSON (.json)</option>
                    </select>
                  </div>
                  <Button
                    onClick={handleExportTranscript}
                    className="flex items-center gap-2"
                  >
                    <DocumentArrowDownIcon className="h-4 w-4" />
                    匯出逐字稿
                  </Button>
                </div>
              </div>
            )}

            {/* Transcript Table */}
            {hasTranscript && (
              <div className="bg-surface border border-border rounded-lg overflow-hidden">
                <div className="px-6 py-4 border-b border-border">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-semibold text-content-primary">
                      對話紀錄
                    </h3>
                    <div className="text-sm text-content-secondary">
                      總時長: {formatDuration(transcript.duration_sec)} | {transcript.segments.length} 段對話
                    </div>
                  </div>
                </div>
                
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-border">
                    <thead className="bg-gray-50 dark:bg-gray-800">
                      <tr>
                        <th className="px-4 py-3 text-left text-xs font-medium text-content-secondary uppercase tracking-wider w-20">
                          時間
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-content-secondary uppercase tracking-wider w-24">
                          說話者
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-content-secondary uppercase tracking-wider">
                          內容
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-content-secondary uppercase tracking-wider w-16">
                          信心度
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-surface divide-y divide-border">
                      {transcript.segments.map((segment, index) => (
                        <tr key={segment.id || index} className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                          <td className="px-4 py-3 whitespace-nowrap text-xs text-content-secondary">
                            {formatTime(segment.start_sec)}
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap">
                            <span className={`text-xs font-medium px-2 py-1 rounded-full ${
                              segment.speaker_id === 1 
                                ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' 
                                : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                            }`}>
                              {getSpeakerLabel(segment.speaker_id)}
                            </span>
                          </td>
                          <td className="px-4 py-3 text-content-primary text-sm">
                            {segment.content}
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap text-xs text-content-secondary">
                            {segment.confidence ? `${Math.round(segment.confidence * 100)}%` : '-'}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {/* No Transcript */}
            {!hasTranscript && !isTranscribing && (
              <div className="bg-surface border border-border rounded-lg p-12 text-center">
                <div className="space-y-4">
                  <MicrophoneIcon className="h-16 w-16 text-content-secondary mx-auto" />
                  <p className="text-content-secondary mb-4">
                    此諮詢記錄尚未上傳音檔或逐字稿
                  </p>
                  <Button
                    onClick={() => router.push(`/dashboard/audio-analysis?session_id=${session.id}`)}
                    className="mx-auto flex items-center gap-2"
                  >
                    <DocumentTextIcon className="h-4 w-4" />
                    上傳音檔
                  </Button>
                </div>
              </div>
            )}
          </div>
        )}

        {activeTab === 'analysis' && (
          <div className="space-y-6">
            {!hasTranscript ? (
              <div className="bg-surface border border-border rounded-lg p-12 text-center">
                <ChatBubbleLeftRightIcon className="h-16 w-16 text-content-secondary mx-auto mb-4" />
                <p className="text-content-secondary mb-4">
                  需要先上傳音檔並完成轉檔才能使用 AI 分析功能
                </p>
                <Button
                  onClick={() => router.push(`/dashboard/audio-analysis?session_id=${session.id}`)}
                  className="flex items-center gap-2 mx-auto"
                >
                  <MicrophoneIcon className="h-4 w-4" />
                  上傳音檔
                </Button>
              </div>
            ) : (
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* AI Summary */}
                <div className="bg-surface border border-border rounded-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold text-content-primary flex items-center gap-2">
                      <DocumentMagnifyingGlassIcon className="h-5 w-5" />
                      會談摘要
                    </h3>
                    <Button
                      onClick={generateAISummary}
                      disabled={isGeneratingAnalysis}
                      className="flex items-center gap-2 text-sm"
                    >
                      {isGeneratingAnalysis ? (
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      ) : (
                        <ChatBubbleLeftRightIcon className="h-4 w-4" />
                      )}
                      {isGeneratingAnalysis ? '產生中...' : '產生摘要'}
                    </Button>
                  </div>
                  
                  <div className="prose prose-sm max-w-none text-content-primary">
                    {aiAnalysis ? (
                      <div className="whitespace-pre-wrap">{aiAnalysis}</div>
                    ) : (
                      <p className="text-content-secondary italic">
                        點擊「產生摘要」按鈕，讓 AI 幫您分析這次會談的重點和洞察
                      </p>
                    )}
                  </div>
                </div>

                {/* AI Chat */}
                <div className="bg-surface border border-border rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-content-primary flex items-center gap-2 mb-4">
                    <ChatBubbleLeftRightIcon className="h-5 w-5" />
                    AI 對話
                  </h3>
                  
                  {/* Chat Messages */}
                  <div className="space-y-4 max-h-96 overflow-y-auto mb-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    {chatMessages.length === 0 ? (
                      <p className="text-content-secondary text-sm italic text-center py-4">
                        您可以在這裡對會談內容提問，或請 AI 提供更深入的分析
                      </p>
                    ) : (
                      chatMessages.map((message, index) => (
                        <div key={index} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                          <div className={`max-w-[80%] px-3 py-2 rounded-lg ${
                            message.role === 'user' 
                              ? 'bg-blue-500 text-white' 
                              : 'bg-white dark:bg-gray-700 text-content-primary border border-border'
                          }`}>
                            <div className="text-sm whitespace-pre-wrap">{message.content}</div>
                          </div>
                        </div>
                      ))
                    )}
                  </div>
                  
                  {/* Chat Input */}
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={currentMessage}
                      onChange={(e) => setCurrentMessage(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && sendChatMessage()}
                      placeholder="輸入您的問題..."
                      className="flex-1 px-3 py-2 border border-border rounded-md bg-surface text-content-primary focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <Button
                      onClick={sendChatMessage}
                      disabled={!currentMessage.trim()}
                      className="flex items-center gap-2"
                    >
                      <ChatBubbleLeftRightIcon className="h-4 w-4" />
                      發送
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default SessionDetailPage;