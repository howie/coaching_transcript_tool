"""add_usage_tracking_tables

Revision ID: 5ba2c5fa0295
Revises: 49515d3a1515
Create Date: 2025-08-15 15:20:41.288599

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "5ba2c5fa0295"
down_revision: Union[str, Sequence[str], None] = "49515d3a1515"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "usage_analytics",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("month_year", sa.String(length=7), nullable=False),
        sa.Column("primary_plan", sa.String(length=20), nullable=False),
        sa.Column("plan_changed_during_month", sa.Boolean(), nullable=False),
        sa.Column("sessions_created", sa.Integer(), nullable=False),
        sa.Column("transcriptions_completed", sa.Integer(), nullable=False),
        sa.Column(
            "total_minutes_processed", sa.DECIMAL(precision=10, scale=2), nullable=False
        ),
        sa.Column("total_cost_usd", sa.DECIMAL(precision=12, scale=4), nullable=False),
        sa.Column("original_transcriptions", sa.Integer(), nullable=False),
        sa.Column("free_retries", sa.Integer(), nullable=False),
        sa.Column("paid_retranscriptions", sa.Integer(), nullable=False),
        sa.Column(
            "google_stt_minutes", sa.DECIMAL(precision=10, scale=2), nullable=False
        ),
        sa.Column(
            "assemblyai_minutes", sa.DECIMAL(precision=10, scale=2), nullable=False
        ),
        sa.Column(
            "exports_by_format", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("total_exports", sa.Integer(), nullable=False),
        sa.Column("period_start", sa.DateTime(timezone=True), nullable=True),
        sa.Column("period_end", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "month_year", name="uq_user_month"),
    )
    # Create indexes for usage_analytics
    op.create_index("idx_usage_analytics_month", "usage_analytics", ["month_year"])
    op.create_index(
        "idx_usage_analytics_user", "usage_analytics", ["user_id", "month_year"]
    )

    op.create_table(
        "usage_logs",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("session_id", sa.UUID(), nullable=False),
        sa.Column("client_id", sa.UUID(), nullable=True),
        sa.Column("duration_minutes", sa.Integer(), nullable=False),
        sa.Column("duration_seconds", sa.Integer(), nullable=False),
        sa.Column("cost_usd", sa.DECIMAL(precision=10, scale=6), nullable=True),
        sa.Column("stt_provider", sa.String(length=50), nullable=False),
        sa.Column(
            "transcription_type",
            sa.Enum(
                "ORIGINAL",
                "RETRY_FAILED",
                "RETRY_SUCCESS",
                "EXPORT",
                "MANUAL",
                name="transcriptiontype",
            ),
            nullable=False,
        ),
        sa.Column("is_billable", sa.Boolean(), nullable=False),
        sa.Column("billing_reason", sa.String(length=100), nullable=True),
        sa.Column("parent_log_id", sa.UUID(), nullable=True),
        sa.Column("user_plan", sa.String(length=20), nullable=False),
        sa.Column(
            "plan_limits", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "transcription_started_at", sa.DateTime(timezone=True), nullable=True
        ),
        sa.Column(
            "transcription_completed_at", sa.DateTime(timezone=True), nullable=True
        ),
        sa.Column("language", sa.String(length=20), nullable=True),
        sa.Column("enable_diarization", sa.Boolean(), nullable=True),
        sa.Column("original_filename", sa.String(length=255), nullable=True),
        sa.Column(
            "audio_file_size_mb", sa.DECIMAL(precision=8, scale=2), nullable=True
        ),
        sa.Column(
            "provider_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["client_id"], ["client.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["parent_log_id"],
            ["usage_logs.id"],
        ),
        sa.ForeignKeyConstraint(["session_id"], ["session.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
    )

    # Create indexes for usage_logs
    op.create_index(
        "idx_usage_logs_user_created", "usage_logs", ["user_id", "created_at"]
    )
    op.create_index("idx_usage_logs_session", "usage_logs", ["session_id"])

    # Skip the session.provider_metadata change since it's not needed

    op.add_column(
        "user",
        sa.Column("session_count", sa.Integer(), nullable=False, server_default="0"),
    )
    op.alter_column("user", "session_count", server_default=None)
    op.add_column(
        "user",
        sa.Column(
            "transcription_count", sa.Integer(), nullable=False, server_default="0"
        ),
    )
    op.alter_column("user", "transcription_count", server_default=None)
    op.add_column(
        "user",
        sa.Column("current_month_start", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "user",
        sa.Column(
            "total_sessions_created", sa.Integer(), nullable=False, server_default="0"
        ),
    )
    op.alter_column("user", "total_sessions_created", server_default=None)
    op.add_column(
        "user",
        sa.Column(
            "total_transcriptions_generated",
            sa.Integer(),
            nullable=False,
            server_default="0",
        ),
    )
    op.alter_column("user", "total_transcriptions_generated", server_default=None)
    op.add_column(
        "user",
        sa.Column(
            "total_minutes_processed",
            sa.DECIMAL(precision=10, scale=2),
            nullable=False,
            server_default="0",
        ),
    )
    op.alter_column("user", "total_minutes_processed", server_default=None)
    op.add_column(
        "user",
        sa.Column(
            "total_cost_usd",
            sa.DECIMAL(precision=12, scale=4),
            nullable=False,
            server_default="0",
        ),
    )
    op.alter_column("user", "total_cost_usd", server_default=None)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("user", "total_cost_usd")
    op.drop_column("user", "total_minutes_processed")
    op.drop_column("user", "total_transcriptions_generated")
    op.drop_column("user", "total_sessions_created")
    op.drop_column("user", "current_month_start")
    op.drop_column("user", "transcription_count")
    op.drop_column("user", "session_count")

    # Drop indexes
    op.drop_index("idx_usage_logs_session", "usage_logs")
    op.drop_index("idx_usage_logs_user_created", "usage_logs")

    op.drop_table("usage_logs")

    op.drop_index("idx_usage_analytics_user", "usage_analytics")
    op.drop_index("idx_usage_analytics_month", "usage_analytics")

    op.drop_table("usage_analytics")
    # ### end Alembic commands ###
