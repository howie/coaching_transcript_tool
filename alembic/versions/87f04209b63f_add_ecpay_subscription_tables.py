"""Add ECPay subscription tables

Revision ID: 87f04209b63f
Revises: 2484c9c03ec5
Create Date: 2025-08-18 20:12:43.940084

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "87f04209b63f"
down_revision: Union[str, Sequence[str], None] = "2484c9c03ec5"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ecpay_credit_authorizations",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("merchant_member_id", sa.String(length=30), nullable=False),
        sa.Column("gwsr", sa.String(length=100), nullable=True),
        sa.Column("auth_code", sa.String(length=20), nullable=True),
        sa.Column("auth_amount", sa.Integer(), nullable=False),
        sa.Column("period_type", sa.String(length=10), nullable=False),
        sa.Column("frequency", sa.Integer(), nullable=False),
        sa.Column("period_amount", sa.Integer(), nullable=False),
        sa.Column("exec_times", sa.Integer(), nullable=False),
        sa.Column("exec_times_limit", sa.Integer(), nullable=True),
        sa.Column("card_last4", sa.String(length=4), nullable=True),
        sa.Column("card_brand", sa.String(length=20), nullable=True),
        sa.Column("card_type", sa.String(length=20), nullable=True),
        sa.Column("auth_status", sa.String(length=20), nullable=False),
        sa.Column("auth_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("next_pay_date", sa.Date(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_ecpay_credit_authorizations_auth_status"),
        "ecpay_credit_authorizations",
        ["auth_status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_ecpay_credit_authorizations_merchant_member_id"),
        "ecpay_credit_authorizations",
        ["merchant_member_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_ecpay_credit_authorizations_next_pay_date"),
        "ecpay_credit_authorizations",
        ["next_pay_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_ecpay_credit_authorizations_user_id"),
        "ecpay_credit_authorizations",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "saas_subscriptions",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("auth_id", sa.UUID(), nullable=True),
        sa.Column("plan_id", sa.String(length=20), nullable=False),
        sa.Column("plan_name", sa.String(length=50), nullable=False),
        sa.Column("billing_cycle", sa.String(length=10), nullable=False),
        sa.Column("amount_twd", sa.Integer(), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("current_period_start", sa.Date(), nullable=False),
        sa.Column("current_period_end", sa.Date(), nullable=False),
        sa.Column("cancel_at_period_end", sa.Boolean(), nullable=False),
        sa.Column("cancelled_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("cancellation_reason", sa.Text(), nullable=True),
        sa.Column("trial_start", sa.Date(), nullable=True),
        sa.Column("trial_end", sa.Date(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["auth_id"],
            ["ecpay_credit_authorizations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_saas_subscriptions_current_period_end"),
        "saas_subscriptions",
        ["current_period_end"],
        unique=False,
    )
    op.create_index(
        op.f("ix_saas_subscriptions_current_period_start"),
        "saas_subscriptions",
        ["current_period_start"],
        unique=False,
    )
    op.create_index(
        op.f("ix_saas_subscriptions_plan_id"),
        "saas_subscriptions",
        ["plan_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_saas_subscriptions_status"),
        "saas_subscriptions",
        ["status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_saas_subscriptions_user_id"),
        "saas_subscriptions",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "grace_periods",
        sa.Column("subscription_id", sa.UUID(), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("reason", sa.String(length=100), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("resolved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("resolution_type", sa.String(length=50), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["subscription_id"],
            ["saas_subscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_grace_periods_end_date"), "grace_periods", ["end_date"], unique=False
    )
    op.create_index(
        op.f("ix_grace_periods_subscription_id"),
        "grace_periods",
        ["subscription_id"],
        unique=False,
    )
    op.create_table(
        "subscription_payments",
        sa.Column("subscription_id", sa.UUID(), nullable=False),
        sa.Column("auth_id", sa.UUID(), nullable=True),
        sa.Column("gwsr", sa.String(length=100), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("failure_reason", sa.Text(), nullable=True),
        sa.Column("retry_count", sa.Integer(), nullable=False),
        sa.Column("period_start", sa.Date(), nullable=False),
        sa.Column("period_end", sa.Date(), nullable=False),
        sa.Column("ecpay_response", sa.JSON(), nullable=True),
        sa.Column("processed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["auth_id"],
            ["ecpay_credit_authorizations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["subscription_id"],
            ["saas_subscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_subscription_payments_created_at"),
        "subscription_payments",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_subscription_payments_gwsr"),
        "subscription_payments",
        ["gwsr"],
        unique=True,
    )
    op.create_index(
        op.f("ix_subscription_payments_period_end"),
        "subscription_payments",
        ["period_end"],
        unique=False,
    )
    op.create_index(
        op.f("ix_subscription_payments_period_start"),
        "subscription_payments",
        ["period_start"],
        unique=False,
    )
    op.create_index(
        op.f("ix_subscription_payments_processed_at"),
        "subscription_payments",
        ["processed_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_subscription_payments_status"),
        "subscription_payments",
        ["status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_subscription_payments_subscription_id"),
        "subscription_payments",
        ["subscription_id"],
        unique=False,
    )
    op.create_table(
        "subscription_pending_changes",
        sa.Column("subscription_id", sa.UUID(), nullable=False),
        sa.Column("new_plan_id", sa.String(length=20), nullable=False),
        sa.Column("new_billing_cycle", sa.String(length=10), nullable=False),
        sa.Column("new_amount_twd", sa.Integer(), nullable=False),
        sa.Column("effective_date", sa.Date(), nullable=False),
        sa.Column("change_type", sa.String(length=20), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("applied_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["subscription_id"],
            ["saas_subscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_subscription_pending_changes_effective_date"),
        "subscription_pending_changes",
        ["effective_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_subscription_pending_changes_subscription_id"),
        "subscription_pending_changes",
        ["subscription_id"],
        unique=False,
    )
    op.create_table(
        "payment_retry_attempts",
        sa.Column("subscription_id", sa.UUID(), nullable=False),
        sa.Column("payment_id", sa.UUID(), nullable=True),
        sa.Column("retry_attempt", sa.Integer(), nullable=False),
        sa.Column("scheduled_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("executed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("success", sa.Boolean(), nullable=True),
        sa.Column("failure_reason", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["payment_id"],
            ["subscription_payments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["subscription_id"],
            ["saas_subscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_payment_retry_attempts_scheduled_at"),
        "payment_retry_attempts",
        ["scheduled_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_payment_retry_attempts_subscription_id"),
        "payment_retry_attempts",
        ["subscription_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_payment_retry_attempts_subscription_id"),
        table_name="payment_retry_attempts",
    )
    op.drop_index(
        op.f("ix_payment_retry_attempts_scheduled_at"),
        table_name="payment_retry_attempts",
    )
    op.drop_table("payment_retry_attempts")
    op.drop_index(
        op.f("ix_subscription_pending_changes_subscription_id"),
        table_name="subscription_pending_changes",
    )
    op.drop_index(
        op.f("ix_subscription_pending_changes_effective_date"),
        table_name="subscription_pending_changes",
    )
    op.drop_table("subscription_pending_changes")
    op.drop_index(
        op.f("ix_subscription_payments_subscription_id"),
        table_name="subscription_payments",
    )
    op.drop_index(
        op.f("ix_subscription_payments_status"), table_name="subscription_payments"
    )
    op.drop_index(
        op.f("ix_subscription_payments_processed_at"),
        table_name="subscription_payments",
    )
    op.drop_index(
        op.f("ix_subscription_payments_period_start"),
        table_name="subscription_payments",
    )
    op.drop_index(
        op.f("ix_subscription_payments_period_end"), table_name="subscription_payments"
    )
    op.drop_index(
        op.f("ix_subscription_payments_gwsr"), table_name="subscription_payments"
    )
    op.drop_index(
        op.f("ix_subscription_payments_created_at"), table_name="subscription_payments"
    )
    op.drop_table("subscription_payments")
    op.drop_index(op.f("ix_grace_periods_subscription_id"), table_name="grace_periods")
    op.drop_index(op.f("ix_grace_periods_end_date"), table_name="grace_periods")
    op.drop_table("grace_periods")
    op.drop_index(
        op.f("ix_saas_subscriptions_user_id"), table_name="saas_subscriptions"
    )
    op.drop_index(op.f("ix_saas_subscriptions_status"), table_name="saas_subscriptions")
    op.drop_index(
        op.f("ix_saas_subscriptions_plan_id"), table_name="saas_subscriptions"
    )
    op.drop_index(
        op.f("ix_saas_subscriptions_current_period_start"),
        table_name="saas_subscriptions",
    )
    op.drop_index(
        op.f("ix_saas_subscriptions_current_period_end"),
        table_name="saas_subscriptions",
    )
    op.drop_table("saas_subscriptions")
    op.drop_index(
        op.f("ix_ecpay_credit_authorizations_user_id"),
        table_name="ecpay_credit_authorizations",
    )
    op.drop_index(
        op.f("ix_ecpay_credit_authorizations_next_pay_date"),
        table_name="ecpay_credit_authorizations",
    )
    op.drop_index(
        op.f("ix_ecpay_credit_authorizations_merchant_member_id"),
        table_name="ecpay_credit_authorizations",
    )
    op.drop_index(
        op.f("ix_ecpay_credit_authorizations_auth_status"),
        table_name="ecpay_credit_authorizations",
    )
    op.drop_table("ecpay_credit_authorizations")
    # ### end Alembic commands ###
