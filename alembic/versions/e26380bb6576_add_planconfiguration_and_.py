"""Add PlanConfiguration and SubscriptionHistory tables

Revision ID: e26380bb6576
Revises: 022955bb0b58
Create Date: 2025-08-16 10:41:40.807471

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e26380bb6576'
down_revision: Union[str, Sequence[str], None] = '022955bb0b58'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('plan_configurations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plan_type', sa.Enum('FREE', 'PRO', 'ENTERPRISE', name='userplan'), nullable=False),
    sa.Column('plan_name', sa.String(length=50), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('tagline', sa.String(length=200), nullable=True),
    sa.Column('limits', sa.JSON(), nullable=False),
    sa.Column('features', sa.JSON(), nullable=False),
    sa.Column('monthly_price_cents', sa.Integer(), nullable=False),
    sa.Column('annual_price_cents', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('monthly_price_twd_cents', sa.Integer(), nullable=False),
    sa.Column('annual_price_twd_cents', sa.Integer(), nullable=False),
    sa.Column('is_popular', sa.Boolean(), nullable=True),
    sa.Column('is_enterprise', sa.Boolean(), nullable=True),
    sa.Column('color_scheme', sa.String(length=20), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_visible', sa.Boolean(), nullable=True),
    sa.Column('extra_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_plan_configurations_plan_type'), 'plan_configurations', ['plan_type'], unique=True)
    op.create_table('subscription_history',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('old_plan', sa.Enum('FREE', 'PRO', 'ENTERPRISE', name='userplan'), nullable=True),
    sa.Column('new_plan', sa.Enum('FREE', 'PRO', 'ENTERPRISE', name='userplan'), nullable=False),
    sa.Column('change_type', sa.String(length=50), nullable=False),
    sa.Column('change_reason', sa.String(length=500), nullable=True),
    sa.Column('amount_charged_cents', sa.Integer(), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('payment_method', sa.String(length=50), nullable=True),
    sa.Column('stripe_payment_intent_id', sa.String(length=255), nullable=True),
    sa.Column('is_prorated', sa.Boolean(), nullable=True),
    sa.Column('prorated_amount_cents', sa.Integer(), nullable=True),
    sa.Column('subscription_start', sa.String(length=50), nullable=True),
    sa.Column('subscription_end', sa.String(length=50), nullable=True),
    sa.Column('extra_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subscription_history_user_id'), 'subscription_history', ['user_id'], unique=False)
    op.drop_index(op.f('idx_usage_history_recorded'), table_name='usage_history')
    op.drop_index(op.f('idx_usage_history_user_period'), table_name='usage_history')
    op.drop_table('usage_history')
    op.alter_column('role_audit_log', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('role_audit_log', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_role_audit_changed_by'), table_name='role_audit_log')
    op.drop_index(op.f('idx_role_audit_created_at'), table_name='role_audit_log')
    op.drop_index(op.f('idx_role_audit_user'), table_name='role_audit_log')
    op.create_index(op.f('ix_role_audit_log_changed_by_id'), 'role_audit_log', ['changed_by_id'], unique=False)
    op.create_index(op.f('ix_role_audit_log_user_id'), 'role_audit_log', ['user_id'], unique=False)
    op.alter_column('session', 'provider_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('usage_analytics', 'exports_by_format',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.drop_index(op.f('idx_usage_analytics_month'), table_name='usage_analytics')
    op.drop_index(op.f('idx_usage_analytics_user'), table_name='usage_analytics')
    op.alter_column('usage_logs', 'plan_limits',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('usage_logs', 'provider_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.drop_index(op.f('idx_usage_logs_session'), table_name='usage_logs')
    op.drop_index(op.f('idx_usage_logs_user_created'), table_name='usage_logs')
    op.drop_index(op.f('idx_user_role'), table_name='user')
    op.drop_index(op.f('idx_user_usage_tracking'), table_name='user')
    op.create_index(op.f('ix_user_role'), 'user', ['role'], unique=False)
    op.drop_column('user', 'last_usage_reset')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('last_usage_reset', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_user_role'), table_name='user')
    op.create_index(op.f('idx_user_usage_tracking'), 'user', ['session_count', 'transcription_count', 'usage_minutes'], unique=False)
    op.create_index(op.f('idx_user_role'), 'user', ['role'], unique=False)
    op.create_index(op.f('idx_usage_logs_user_created'), 'usage_logs', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_usage_logs_session'), 'usage_logs', ['session_id'], unique=False)
    op.alter_column('usage_logs', 'provider_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('usage_logs', 'plan_limits',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.create_index(op.f('idx_usage_analytics_user'), 'usage_analytics', ['user_id', 'month_year'], unique=False)
    op.create_index(op.f('idx_usage_analytics_month'), 'usage_analytics', ['month_year'], unique=False)
    op.alter_column('usage_analytics', 'exports_by_format',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('session', 'provider_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.drop_index(op.f('ix_role_audit_log_user_id'), table_name='role_audit_log')
    op.drop_index(op.f('ix_role_audit_log_changed_by_id'), table_name='role_audit_log')
    op.create_index(op.f('idx_role_audit_user'), 'role_audit_log', ['user_id'], unique=False)
    op.create_index(op.f('idx_role_audit_created_at'), 'role_audit_log', ['created_at'], unique=False)
    op.create_index(op.f('idx_role_audit_changed_by'), 'role_audit_log', ['changed_by_id'], unique=False)
    op.alter_column('role_audit_log', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('role_audit_log', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_table('usage_history',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('recorded_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('period_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('period_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('period_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('sessions_created', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('audio_minutes_processed', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=True),
    sa.Column('transcriptions_completed', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('exports_generated', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('storage_used_mb', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=True),
    sa.Column('unique_clients', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('api_calls_made', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('concurrent_sessions_peak', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('plan_name', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('plan_limits', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('usage_history_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('usage_history_pkey')),
    sa.UniqueConstraint('user_id', 'period_type', 'period_start', name=op.f('unique_user_period'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_usage_history_user_period'), 'usage_history', ['user_id', 'period_start'], unique=False)
    op.create_index(op.f('idx_usage_history_recorded'), 'usage_history', ['recorded_at'], unique=False)
    op.drop_index(op.f('ix_subscription_history_user_id'), table_name='subscription_history')
    op.drop_table('subscription_history')
    op.drop_index(op.f('ix_plan_configurations_plan_type'), table_name='plan_configurations')
    op.drop_table('plan_configurations')
    # ### end Alembic commands ###
